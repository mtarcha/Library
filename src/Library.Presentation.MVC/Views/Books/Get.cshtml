@using Library.Presentation.MVC.Clients
@using Library.Presentation.MVC.ViewModels
@model Library.Presentation.MVC.ViewModels.BooksViewModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<nav class="navbar navbar-expand navbar-dark bg-dark align-items-center">
    <a class="navbar-brand text-success font-weight-bold" style="font-size: 45px">Home Library</a>
    <div class="d-flex flex-row-reverse flex-fill">
        @if (User.Identity.IsAuthenticated)
        {
            <form method="post" class="m-2 float-right d-flex justify-content-center" asp-controller="Account" asp-action="LogOff">
                <input class="btn btn-outline-success" type="submit" value="Log Off" />
            </form>

            <div class="dropdown align-self-center ">
                <button class="m-2 btn btn-outline-success my-2 my-sm-0 float-right dropdown-toggle" type="button" id="dropdownMenu2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    @User.Identity.Name
                </button>
                <div class="dropdown-menu" aria-labelledby="dropdownMenu2">
                    <button class="dropdown-item" type="button">Favourite Books</button>
                    <button class="dropdown-item" type="button">Favourite Reviewers</button>
                    <button class="dropdown-item" type="button">Recommended To Read</button>
                </div>

                <a class="m-2 btn btn-outline-success my-2 my-sm-0 float-right" asp-controller="Books" asp-action="Create">+</a>
            </div>
        }
        else
        {
            <a class="m-2 btn btn-outline-success my-2 my-sm-0 float-right" asp-controller="Account" asp-action="Login">Login</a>
            <a class="m-2 btn btn-outline-success my-2 my-sm-0 float-right" asp-controller="Account" asp-action="Register">Register</a>
        }
    </div>
</nav>

<form class="form-inline m-2" asp-action="Get" method="get">
    <input class="m-2 form-control form-control-sm flex-fill" type="text" placeholder="Search" name="pattern" value="@Model.SearchPattern" aria-label="Search">
    <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
</form>

<div class="card-deck m-4 jfy-c flex-fill">
    @foreach (var book in Model.BooksOnPage)
    {
        <div id="@book.Id" class="card cw-20 mb-3">
            @if (book.Picture != null && book.Picture.Length > 0)
            {
                <img src="data:image;base64,@(Convert.ToBase64String(book.Picture))" class="card-img-top" />
            }
            else
            {
                <img src="img/Book.jpg" class="card-img-top" alt="...">
            }

            <div class="card-body">
                <h5 class="card-title">@book.Name</h5>
                <p class="card-text">@book.Summary</p>
                @foreach (var author in book.Authors)
                {
                    <p class="card-text text-success font-weight-bold">@author.FirstName  @author.LastName </p>
                }
            </div>
            <div class="card-footer">
                <span id="rate" class="card-text">Rate: @book.Rate</span>

                @if (User.Identity.IsAuthenticated)
                {
                    <form class="float-right" asp-action="SetRate" method="post">
                        <input type="hidden" value="@book.Id" name="BookId" />

                        <input 
                            class="border border-success rounded" 
                            name="Rate" 
                            type="number" 
                            min="@Constants.BookRateMinValue" 
                            max="@Constants.BookRateMaxValue" step="1">

                        <span class="fa fa-star"></span>
                        <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Set</button>
                    </form>
                }


                @if (User.IsInRole(Constants.AdminRoleName))
                {
                    <br />
                    <br />
                    <a class="mt-2 btn btn-outline-success btn-block my-sm-0 float-right" asp-controller="Books" asp-action="Edit" asp-route-id="@book.Id">Update Book</a>
                }
            </div>
        </div>
    }

    <script src="~/lib/signalr/signalr.js"></script>

    <script>
        var connection = new signalR.HubConnectionBuilder().withUrl("/book-events").build();
        connection.on("bookRateChanged", bookRateChangedEvent => {
            addEventToList(bookRateChangedEvent);
        });

        connection.start();

        var addEventToList = bookRateChangedEvent => {
            var bookId = bookRateChangedEvent.bookId;

            var bookCard = document.getElementById(bookId);
            var rate = bookCard.querySelectorAll("#rate").item(0);
            rate.textContent = "Rate:" + bookRateChangedEvent.rate;
        };
    </script>
</div>

@{
    var vm = @Model;
    var pagination = @Model.Pagination;

    <!--TODO: Make ViewComponent for pagination -->
    <nav>
        @* Previos button *@
        <ul class="pagination justify-content-center">
            <li class="page-item @TrySetDisabled(pagination.Previous)">
                <a class="page-link" href=@Url.Action("Get",  new { pattern = @vm.SearchPattern, page = @pagination.Previous.Index }) aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                    <span class="sr-only">Previous</span>
                </a>
            </li>

            @* Page buttons *@
            @foreach (var page in pagination.Pages)
            {
                <!-- TODO: Implement correct disable for active page button to avoid naviagtion to it self!-->
                <li class="page-item @TrySetActive(page)">
                    @Html.ActionLink(page.Index.ToString(), "Get", "Books", new { pattern = vm.SearchPattern, page = page.Index }, new { @class = "page-link" })
                    @*<a class="page-link" href=@Url.Action("Index",  new { pattern = @vm.Pattern, page = @page.Index })>@{return page.Index;}</a>*@
                </li>
            }

            @* Next button *@
            <li class="page-item @TrySetDisabled(pagination.Next)">
                <a class="page-link" href=@Url.Action("Get",  new { pattern = @vm.SearchPattern, page = @pagination.Next.Index }) aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                    <span class="sr-only">Next</span>
                </a>
            </li>
        </ul>
    </nav>
}
<!-- Html helpers -->

@functions
{
    public string TrySetActive(PageViewModel page)
    {
        return page.IsActive ? "active" : string.Empty;
    }

    public string TrySetDisabled(PageViewModel page)
    {
        return !page.IsActive ? "disabled" : string.Empty;
    }
}